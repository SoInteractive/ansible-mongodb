---
- name: Create configuration file
  template:
    src: mongod.conf.j2
    dest: "/tmp/mongod.conf"

- name: Create keyfile
  shell: "openssl rand -base64 756 > /tmp/keyfile"
  args:
    creates: "/tmp/keyfile"
  run_once: true
  delegate_to: "{{ groups[mongodb_hosts_group][0] }}"

- block:
  - name: Download keyfile content
    slurp:
      src: "/tmp/keyfile"
    register: keyfile_content
    run_once: true
    delegate_to: "{{ groups[mongodb_hosts_group][0] }}"

  - name: Propagate keyfile
    copy:
      content: "{{ keyfile_content['content'] | b64decode }}"
      dest: "/tmp/keyfile"
  when: groups[mongodb_hosts_group] | length > 1

- name: Copy administration script to change auth schema
  template:
    src: "auth_schema.js.j2"
    dest: "/tmp/auth_schema.js"

- name: Run initialization container
  docker_container:
    name: mongo-initialize
    image: "mongo:{{ mongodb_version }}"
    command: "mongod --smallfiles"
    state: started
    ports: "{{ mongodb_port }}:27017"
    volumes:
    - "mongo_data:/data/db:rw"
    - "mongo_config:/data/configdb:rw"
    - "/tmp/auth_schema.js:/tmp/auth_schema.js:ro"

- name: Wait for mongo
  wait_for:
    host: localhost
    port: "{{ mongodb_port }}"
    delay: 5
    timeout: 60

- name: Set authentication schema
  command: "docker exec mongo-initialize bash -c 'mongo admin /tmp/auth_schema.js'"
  register: result
  retries: 5
  until: result | success
  run_once: true
  delegate_to: "{{ groups[mongodb_hosts_group][0] }}"
  tags: skip_ansible_lint

- name: Propagate keyfile and configuration file
  command: "docker cp /tmp/{{ item }} mongo-initialize:/data/configdb/{{ item }}"
  with_items:
  - keyfile
  - mongod.conf
  tags: skip_ansible_lint

- name: Change mongo files ownership
  command: "docker exec mongo-initialize bash -c 'chown mongodb:mongodb /data/configdb/*'"
  tags: skip_ansible_lint

- name: Change keyfile permissions
  command: "docker exec mongo-initialize bash -c 'chmod 0600 /data/configdb/keyfile'"
  tags: skip_ansible_lint

- name: Create admin user
  mongodb_user:
    database: admin
    login_port: "{{ mongodb_port }}"
    name: "{{ mongodb_admin.user }}"
    password: "{{ mongodb_admin.pass }}"
    update_password: "{{ 'always' if mongodb_passwords_update else 'on_create' }}"
    roles: root
    state: present
  run_once: true
  delegate_to: "{{ groups[mongodb_hosts_group][0] }}"

- name: Stop bootstraping container
  docker_container:
    name: mongo-initialize
    state: absent
    keep_volumes: true
