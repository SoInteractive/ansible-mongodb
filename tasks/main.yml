---
- include: prechecks.yml

- name: Ensure pip is installed
  package:
    name: python-pip
    state: present

- name: Ensure pymongo is installed
  pip:
    name: pymongo
    state: present

- name: Get all docker volumes
  command: "docker volume ls -q"
  changed_when: false
  register: volumes
  tags: skip_ansible_lint

- name: Create docker volumes
  command: "docker volume create {{ item }}"
  with_items:
  - mongo_data
  - mongo_config
  when:
  - not 'mongo_data' in volumes.stdout_lines
  - not 'mongo_config' in volumes.stdout_lines
  tags: skip_ansible_lint

- include: bootstrap.yml
  when: not 'mongo_data' in volumes.stdout_lines

- name: Check if replica is configured
  command: "docker exec mongo bash -c \"mongo admin -u {{ mongodb_admin.user }} -p {{ mongodb_admin.pass }} --eval 'rs.status();'\""
  no_log: True
  register: replica_status
  changed_when: False
  ignore_errors: True
  when: mongodb_replica_name != ''
  tags: skip_ansible_lint

- name: Evaluate replica status
  set_fact:
    start_replica: "{{ not '_id\" : ' + (groups[mongodb_hosts_group] | length -1)|string in replica_status.stdout }}"
  when: mongodb_replica_name != ''

- include: replica.yml
  when:
  - mongodb_replica_name != ''
  - start_replica

- name: Ensure mongodb containers are running
  docker_container:
    name: mongo
    image: "mongo:{{ mongodb_version }}"
    labels:
      namespace: database
    state: started
    command: "mongod --config /data/configdb/mongod.conf --smallfiles"
    user: mongodb
    restart_policy: always
    ports: "{{ mongodb_port }}:27017"
    volumes:
    - /etc/localtime:/etc/localtime:ro
    - "mongo_data:/data/db:rw"
    - "mongo_config:/data/configdb:rw"
  register: start_mongo

- name: Wait for mongo
  wait_for:
    host: localhost
    port: "{{ mongodb_port }}"
    timeout: 60
    delay: 5
  when: start_mongo | changed

- include: metrics.yml
  when: mongodb_metrics

- include: users.yml
