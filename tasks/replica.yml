- name: Stop mongodb containers
  docker_container:
    name: mongo
    state: stopped
    keep_volumes: True
  ignore_errors: true

- name: Copy replica initialization script
  template:
    src: "{{ item }}.j2"
    dest: "/tmp/{{ item }}"
  with_items:
  - replica_init.js
  run_once: true
  delegate_to: "{{ groups[mongodb_hosts_group][0] }}"

- name: Bootstrap mongo for replica creation
  docker_container:
    name: mongo-initialize
    image: "mongo:{{ mongodb_version }}"
    command: "mongod --replSet {{ mongodb_replica_name }} --smallfiles"
    state: started
    ports: "{{ mongodb_port }}:27017"
    volumes:
    - "mongo_data:/data/db"
    - "mongodb_config:/data/configdb"
    - "/tmp/replica_init.js:/tmp/replica_init.js:ro"

- block:
  - name: Wait for mongo to start
    wait_for:
      host: localhost
      port: "{{ mongodb_port }}"
      delay: 5
      timeout: 60

  - name: Replica initialization
    command: "docker exec mongo-initialize bash -c 'mongo admin /tmp/replica_init.js'"
    register: result
    retries: 5
    until: result | success

  - name: Wait for mongo to initialize replica
    pause:
      seconds: 5

  - name: Check if replica initialization was successfull
    command: "docker exec mongo-initialize bash -c \"mongo admin --eval 'rs.status();'\""
    register: replica_status
    until: "'_id\" : {{ groups[mongodb_hosts_group] | length -1 }}' in replica_status.stdout"
    delay: 2
    retries: 30

  run_once: true
  delegate_to: "{{ groups[mongodb_hosts_group][0] }}"

- name: Stop bootstraping containers
  docker_container:
    name: mongo-initialize
    state: absent
    keep_volumes: True
